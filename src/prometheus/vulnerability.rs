// Copyright 2019 The Prometheus Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use std::collections::HashMap;
use std::fs;
use std::io;
use std::path::Path;

const NOT_AFFECTED: &str = "not affected";
const VULNERABLE: &str = "vulnerable";
const MITIGATION: &str = "mitigation";
const UNKNOWN: &str = "unknown";

#[derive(Debug)]
pub struct Vulnerability {
    code_name: String,
    state: VulnerabilityState,
    mitigation: String,
}

#[derive(Debug, PartialEq, Eq, Hash)]
pub enum VulnerabilityState {
    NotAffected,
    Vulnerable,
    Mitigation,
    Unknown,
}

impl VulnerabilityState {
    fn from_str(s: &str) -> Self {
        match s {
            NOT_AFFECTED => VulnerabilityState::NotAffected,
            VULNERABLE => VulnerabilityState::Vulnerable,
            MITIGATION => VulnerabilityState::Mitigation,
            _ => VulnerabilityState::Unknown,
        }
    }
}

pub struct FS {
    sys_path: String,
}

impl FS {
    pub fn new(sys_path: String) -> Self {
        FS { sys_path }
    }

    pub fn cpu_vulnerabilities(&self) -> Result<HashMap<String, Vulnerability>, io::Error> {
        let pattern = format!("{}/devices/system/cpu/vulnerabilities/*", self.sys_path);
        let matching_filepaths = glob::glob(&pattern)?;

        let mut vulnerabilities = HashMap::new();
        for path in matching_filepaths {
            let path = path?;
            let filename = path.file_name().unwrap().to_str().unwrap().to_string();
            let raw_content = fs::read_to_string(&path)?;

            let vulnerability = parse_vulnerability(&filename, &raw_content)?;
            vulnerabilities.insert(filename, vulnerability);
        }

        Ok(vulnerabilities)
    }
}

fn parse_vulnerability(name: &str, raw_content: &str) -> Result<Vulnerability, io::Error> {
    let raw_content = raw_content.trim();
    let raw_content_lower = raw_content.to_lowercase();

    let state = if raw_content_lower.starts_with(NOT_AFFECTED) {
        VulnerabilityState::NotAffected
    } else if raw_content_lower.starts_with(VULNERABLE) {
        VulnerabilityState::Vulnerable
    } else if raw_content_lower.starts_with(MITIGATION) {
        VulnerabilityState::Mitigation
    } else if raw_content_lower.starts_with(UNKNOWN) {
        VulnerabilityState::Unknown
    } else {
        VulnerabilityState::Unknown
    };

    let mitigation = if state == VulnerabilityState::Vulnerable || state == VulnerabilityState::Mitigation || state == VulnerabilityState::Unknown {
        let parts: Vec<&str> = raw_content.split_whitespace().collect();
        if parts.len() > 1 {
            parts[1..].join(" ")
        } else {
            raw_content.to_string()
        }
    } else {
        String::new()
    };

    Ok(Vulnerability {
        code_name: name.to_string(),
        state,
        mitigation,
    })
}