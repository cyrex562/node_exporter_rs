use std::env;
use std::fs;
use std::process;
use std::fmt;
use std::collections::HashMap;
use std::io::Write;
use std::path::Path;
use std::str::FromStr;

use prometheus::{self, core::Collector, proto::MetricFamily};
use runtime::metrics::{self, Sample, Description, Kind};

fn main() {
    let given_version = env::args().nth(1).unwrap_or_else(|| runtime::version());
    let tool_version = runtime::version();

    if given_version != tool_version {
        eprintln!("using Go version {} but expected Go version {}", tool_version, given_version);
        process::exit(1);
    }

    let v = GoVersion::from_str(&tool_version).unwrap();
    println!("generating metrics for Go version {}", v);

    let all_desc = metrics::all();

    let default_desc: Vec<_> = all_desc.iter()
        .filter(|d| internal::GO_COLLECTOR_DEFAULT_RUNTIME_METRICS.is_match(&d.name))
        .cloned()
        .collect();

    let cardinality = rm_cardinality();

    let mut buf = Vec::new();
    write!(
        &mut buf,
        include_str!("template.rs"),
        all_descriptions = all_desc,
        default_descriptions = default_desc,
        go_version = v,
        cardinality = cardinality,
    ).unwrap();

    let result = rustfmt_wrapper::format(&buf).unwrap();

    let fname = format!("go_collector_metrics_{}_test.rs", v.abbr());
    fs::write(&fname, result).unwrap();
}

#[derive(Debug, PartialEq, Eq, PartialOrd, Ord)]
struct GoVersion(u8);

impl fmt::Display for GoVersion {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "go1.{}", self.0)
    }
}

impl GoVersion {
    fn abbr(&self) -> String {
        format!("go1{}", self.0)
    }
}

impl FromStr for GoVersion {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let parts: Vec<_> = s.trim_start_matches("go").split('.').collect();
        if parts.len() != 2 {
            return Err(());
        }
        let minor = parts[1].parse().map_err(|_| ())?;
        Ok(GoVersion(minor))
    }
}

fn rm_cardinality() -> usize {
    let mut cardinality = 0;
    let mut histograms = Vec::new();

    for d in metrics::all() {
        if d.kind == Kind::Float64Histogram {
            histograms.push(Sample::new(d.name));
        } else {
            cardinality += 1;
        }
    }

    metrics::read(&mut histograms);
    for sample in histograms {
        let name = &sample.name;
        let buckets = internal::runtime_metrics_buckets_for_unit(
            sample.value.float64_histogram().buckets,
            &name[name.find(':').unwrap() + 1..],
        );
        cardinality += buckets.len() + 3;
        cardinality -= 1;
        if buckets.last() == Some(&f64::INFINITY) {
            cardinality -= 1;
        }
        if buckets.first() == Some(&f64::NEG_INFINITY) {
            cardinality -= 1;
        }
    }

    cardinality
}

const TEMPLATE: &str = r#"
// Code generated by gen_go_collector_metrics_set.rs; DO NOT EDIT.
//go:generate cargo run -- {{go_version}}

//go:build {{go_version}} && !{{next_version}}
// +build {{go_version}},!{{next_version}}

package prometheus

var (
    expected_runtime_metrics = map[string]string{
        {{#each all_descriptions}}
        "{{this.name}}": "{{rm2prom this}}",
        {{/each}}
    }

    exp_metrics = map[string]string{
        {{#each default_descriptions}}
        "{{this.name}}": "{{rm2prom this}}",
        {{/each}}
    }
)

const expected_runtime_metrics_cardinality = {{cardinality}}
"#;